package com.a2345.mimeplayer.Util;

/**
 * Created by fanzf on 2016/3/7.
 */
public class M1905Helper {

    public static String getEncryptParam(String t, String r, String a) {
        long l = System.currentTimeMillis() / 1000;
        String c = "" + l;
        String h = "MCRYPT_MODE_CBC";
        String n = r + c;
        String A = triple_des(n, r);
        String iv = r.substring(24, 32);
        r = r.substring(0, 24);
        String s = "iv=" + iv + "&k=" + r + "&md5=" + A + "&version=" + a + "&vid=" + t + "&padding=1&mod=" + h + "&time=" + c;
        String sds = des_1905(r, s, 1, 1, iv, 1);
        String y = base64encode(sds);
        return y;

    }

    public static String triple_des(String t, String r) {
        String a = r.substring(24, 32);
        r = r.substring(0, 24);
        return base64encode(des_1905(r, t, 1, 1, a, 1));
    }

    public static String des_1905(String t, String r, int a, int c, String h, int n) {
        int[] v, m, T, x, D, S, k, E;
        int l = 0, b = 0, f = 0, d = 0, p = 0, C = 0, y, w, u, A, i, o;
        String result = "";
        String tempresult = "";

        v = new int[] { 16843776, 0, 65536, 16843780, 16842756, 66564, 4, 65536, 1024, 16843776, 16843780, 1024, 16778244, 16842756, 16777216, 4, 1028,
                16778240, 16778240, 66560, 66560, 16842752, 16842752, 16778244, 65540, 16777220, 16777220, 65540, 0, 1028, 66564, 16777216, 65536, 16843780, 4,
                16842752, 16843776, 16777216, 16777216, 1024, 16842756, 65536, 66560, 16777220, 1024, 4, 16778244, 66564, 16843780, 65540, 16842752, 16778244,
                16777220, 1028, 66564, 16843776, 1028, 16778240, 16778240, 0, 65540, 66560, 0, 16842756 };
        m = new int[] { -2146402272, -2147450880, 32768, 1081376, 1048576, 32, -2146435040, -2147450848, -2147483616, -2146402272, -2146402304, -2147483648,
                -2147450880, 1048576, 32, -2146435040, 1081344, 1048608, -2147450848, 0, -2147483648, 32768, 1081376, -2146435072, 1048608, -2147483616, 0,
                1081344, 32800, -2146402304, -2146435072, 32800, 0, 1081376, -2146435040, 1048576, -2147450848, -2146435072, -2146402304, 32768, -2146435072,
                -2147450880, 32, -2146402272, 1081376, 32, 32768, -2147483648, 32800, -2146402304, 1048576, -2147483616, 1048608, -2147450848, -2147483616,
                1048608, 1081344, 0, -2147450880, 32800, -2147483648, -2146435040, -2146402272, 1081344 };
        T = new int[] { 520, 134349312, 0, 134348808, 134218240, 0, 131592, 134218240, 131080, 134217736, 134217736, 131072, 134349320, 131080, 134348800, 520,
                134217728, 8, 134349312, 512, 131584, 134348800, 134348808, 131592, 134218248, 131584, 131072, 134218248, 8, 134349320, 512, 134217728,
                134349312, 134217728, 131080, 520, 131072, 134349312, 134218240, 0, 512, 131080, 134349320, 134218240, 134217736, 512, 0, 134348808, 134218248,
                131072, 134217728, 134349320, 8, 131592, 131584, 134217736, 134348800, 134218248, 520, 134348800, 131592, 8, 134348808, 131584 };
        x = new int[] { 8396801, 8321, 8321, 128, 8396928, 8388737, 8388609, 8193, 0, 8396800, 8396800, 8396929, 129, 0, 8388736, 8388609, 1, 8192, 8388608,
                8396801, 128, 8388608, 8193, 8320, 8388737, 1, 8320, 8388736, 8192, 8396928, 8396929, 129, 8388736, 8388609, 8396800, 8396929, 129, 0, 0,
                8396800, 8320, 8388736, 8388737, 1, 8396801, 8321, 8321, 128, 8396929, 129, 1, 8192, 8388609, 8193, 8396928, 8388737, 8193, 8320, 8388608,
                8396801, 128, 8388608, 8192, 8396928 };
        D = new int[] { 256, 34078976, 34078720, 1107296512, 524288, 256, 1073741824, 34078720, 1074266368, 524288, 33554688, 1074266368, 1107296512,
                1107820544, 524544, 1073741824, 33554432, 1074266112, 1074266112, 0, 1073742080, 1107820800, 1107820800, 33554688, 1107820544, 1073742080, 0,
                1107296256, 34078976, 33554432, 1107296256, 524544, 524288, 1107296512, 256, 33554432, 1073741824, 34078720, 1107296512, 1074266368, 33554688,
                1073741824, 1107820544, 34078976, 1074266368, 256, 33554432, 1107820544, 1107820800, 524544, 1107296256, 1107820800, 34078720, 0, 1074266112,
                1107296256, 524544, 33554688, 1073742080, 524288, 0, 1074266112, 34078976, 1073742080 };
        S = new int[] { 536870928, 541065216, 16384, 541081616, 541065216, 16, 541081616, 4194304, 536887296, 4210704, 4194304, 536870928, 4194320, 536887296,
                536870912, 16400, 0, 4194320, 536887312, 16384, 4210688, 536887312, 16, 541065232, 541065232, 0, 4210704, 541081600, 16400, 4210688, 541081600,
                536870912, 536887296, 16, 541065232, 4210688, 541081616, 4194304, 16400, 536870928, 4194304, 536887296, 536870912, 16400, 536870928, 541081616,
                4210688, 541065216, 4210704, 541081600, 0, 541065232, 16, 16384, 541065216, 4210704, 16384, 4194320, 536887312, 0, 541081600, 536870912,
                4194320, 536887312 };
        k = new int[] { 2097152, 69206018, 67110914, 0, 2048, 67110914, 2099202, 69208064, 69208066, 2097152, 0, 67108866, 2, 67108864, 69206018, 2050,
                67110912, 2099202, 2097154, 67110912, 67108866, 69206016, 69208064, 2097154, 69206016, 2048, 2050, 69208066, 2099200, 2, 67108864, 2099200,
                67108864, 2099200, 2097152, 67110914, 67110914, 69206018, 69206018, 2, 2097154, 67108864, 67110912, 2097152, 69208064, 2050, 2099202, 69208064,
                2050, 67108866, 69208066, 69206016, 2099200, 0, 2, 69208066, 0, 2099202, 69206016, 2048, 67108866, 67110912, 2048, 2097154 };
        E = new int[] { 268439616, 4096, 262144, 268701760, 268435456, 268439616, 64, 268435456, 262208, 268697600, 268701760, 266240, 268701696, 266304, 4096,
                64, 268697600, 268435520, 268439552, 4160, 266240, 262208, 268697664, 268701696, 4160, 0, 0, 268697664, 268435520, 268439552, 266304, 262144,
                266304, 262144, 268701696, 4096, 64, 268697664, 4096, 266304, 268439552, 64, 268435520, 268697600, 268697664, 268435456, 262144, 268439616, 0,
                268701760, 262208, 268435520, 268697600, 268439552, 268439616, 0, 268701760, 266240, 266240, 4160, 4160, 262208, 268435456, 268701696 };

        int[] H = des_createKeys_1905(t);

        int M = 0;
        int R = r.length();
        int K = 0;
        int P = 32 == H.length ? 3 : 9;
        int[] g;
        if (3 == P) {
            if (1 == a) {
                g = new int[] { 0, 32, 2 };
            } else {
                g = new int[] { 30, -2, -2 };
            }
        } else {
            if (1 == a) {
                g = new int[] { 0, 32, 2, 62, 30, -2, 64, 96, 2 };
            } else {
                g = new int[] { 94, 62, -2, 32, 64, 2, 30, -2, -2 };
            }
        }

        if (2 == n) {
            r += "        ";
        } else {
            if (1 == n) {
                y = 8 - R % 8;
                StringBuilder mStringbuilder = new StringBuilder(r).append((char) y).append((char) y).append((char) y).append((char) y).append((char) y)
                        .append((char) y).append((char) y).append((char) y);
                r = mStringbuilder.toString();
                if (8 == y) {
                    R += 8;
                }
            } else {
                r += "        ";
            }

        }

        if (1 == c) {
            l = h.charAt(M++) << 24 | h.charAt(M++) << 16 | h.charAt(M++) << 8 | h.charAt(M++);
            b = h.charAt(M++) << 24 | h.charAt(M++) << 16 | h.charAt(M++) << 8 | h.charAt(M++);
        }

        for (M = 0; M < R;) {
            f = r.charAt(M++) << 24 | r.charAt(M++) << 16 | r.charAt(M++) << 8 | r.charAt(M++);
            d = r.charAt(M++) << 24 | r.charAt(M++) << 16 | r.charAt(M++) << 8 | r.charAt(M++);
            if (1 == c) {
                if (1 == a) {
                    f ^= l;
                    d ^= b;
                } else {
                    p = l;
                    C = b;
                    l = f;
                    b = d;
                }
            }
            y = 252645135 & (f >>> 4 ^ d);
            d ^= y;
            f ^= y << 4;
            y = 65535 & (f >>> 16 ^ d);
            d ^= y;
            f ^= y << 16;
            y = 858993459 & (d >>> 2 ^ f);
            f ^= y;
            d ^= y << 2;
            y = 16711935 & (d >>> 8 ^ f);
            f ^= y;
            d ^= y << 8;
            y = 1431655765 & (f >>> 1 ^ d);
            d ^= y;
            f ^= y << 1;
            f = f << 1 | f >>> 31;
            d = d << 1 | d >>> 31;

            for (int s = 0; P > s; s += 3) {
                w = g[s + 1];
                u = g[s + 2];

                for (A = g[s]; A != w; A += u) {
                    i = d ^ H[A];
                    o = (d >>> 4 | d << 28) ^ H[A + 1];
                    y = f;
                    f = d;
                    d = y
                            ^ (m[i >>> 24 & 63] | x[i >>> 16 & 63] | S[i >>> 8 & 63] | E[63 & i] | v[o >>> 24 & 63] | T[o >>> 16 & 63] | D[o >>> 8 & 63] | k[63 & o]);

                }
                y = f;
                f = d;
                d = y;

            }
            f = f >>> 1 | f << 31;
            d = d >>> 1 | d << 31;
            y = 1431655765 & (f >>> 1 ^ d);
            d ^= y;
            f ^= y << 1;
            y = 16711935 & (d >>> 8 ^ f);
            f ^= y;
            d ^= y << 8;
            y = 858993459 & (d >>> 2 ^ f);
            f ^= y;
            d ^= y << 2;
            y = 65535 & (f >>> 16 ^ d);
            d ^= y;
            f ^= y << 16;
            y = 252645135 & (f >>> 4 ^ d);
            d ^= y;
            f ^= y << 4;
            if (1 == c) {
                if (1 == a) {
                    l = f;
                    b = d;
                } else {
                    f ^= p;
                    d ^= C;
                }
            } else {
                f ^= p;
                d ^= C;
            }
            StringBuilder sbTr = new StringBuilder(tempresult).append((char) (f >>> 24)).append((char) (f >>> 16 & 255)).append((char) (f >>> 8 & 255))
                    .append((char) (255 & f)).append((char) (d >>> 24)).append((char) (d >>> 16 & 255)).append((char) (d >>> 8 & 255)).append((char) (255 & d));
            tempresult = sbTr.toString();
            K += 8;
            if (512 == K) {
                result += tempresult;
                tempresult = "";
                K = 0;
            }
        }

        return result + tempresult;
    }

    public static int[] des_createKeys_1905(String str) {

        int[] pc2bytes0, pc2bytes1, pc2bytes2, pc2bytes3, pc2bytes4, pc2bytes5, pc2bytes6, pc2bytes7, pc2bytes8, pc2bytes9, pc2bytes10, pc2bytes11, pc2bytes12, pc2bytes13;

        pc2bytes0 = new int[] { 0, 4, 536870912, 536870916, 65536, 65540, 536936448, 536936452, 512, 516, 536871424, 536871428, 66048, 66052, 536936960,
                536936964 };
        pc2bytes1 = new int[] { 0, 1, 1048576, 1048577, 67108864, 67108865, 68157440, 68157441, 256, 257, 1048832, 1048833, 67109120, 67109121, 68157696,
                68157697 };
        pc2bytes2 = new int[] { 0, 8, 2048, 2056, 16777216, 16777224, 16779264, 16779272, 0, 8, 2048, 2056, 16777216, 16777224, 16779264, 16779272 };
        pc2bytes3 = new int[] { 0, 2097152, 134217728, 136314880, 8192, 2105344, 134225920, 136323072, 131072, 2228224, 134348800, 136445952, 139264, 2236416,
                134356992, 136454144 };
        pc2bytes4 = new int[] { 0, 262144, 16, 262160, 0, 262144, 16, 262160, 4096, 266240, 4112, 266256, 4096, 266240, 4112, 266256 };
        pc2bytes5 = new int[] { 0, 1024, 32, 1056, 0, 1024, 32, 1056, 33554432, 33555456, 33554464, 33555488, 33554432, 33555456, 33554464, 33555488 };
        pc2bytes6 = new int[] { 0, 268435456, 524288, 268959744, 2, 268435458, 524290, 268959746, 0, 268435456, 524288, 268959744, 2, 268435458, 524290,
                268959746 };
        pc2bytes7 = new int[] { 0, 65536, 2048, 67584, 536870912, 536936448, 536872960, 536938496, 131072, 196608, 133120, 198656, 537001984, 537067520,
                537004032, 537069568 };
        pc2bytes8 = new int[] { 0, 262144, 0, 262144, 2, 262146, 2, 262146, 33554432, 33816576, 33554432, 33816576, 33554434, 33816578, 33554434, 33816578 };
        pc2bytes9 = new int[] { 0, 268435456, 8, 268435464, 0, 268435456, 8, 268435464, 1024, 268436480, 1032, 268436488, 1024, 268436480, 1032, 268436488 };
        pc2bytes10 = new int[] { 0, 32, 0, 32, 1048576, 1048608, 1048576, 1048608, 8192, 8224, 8192, 8224, 1056768, 1056800, 1056768, 1056800 };
        pc2bytes11 = new int[] { 0, 16777216, 512, 16777728, 2097152, 18874368, 2097664, 18874880, 67108864, 83886080, 67109376, 83886592, 69206016, 85983232,
                69206528, 85983744 };
        pc2bytes12 = new int[] { 0, 4096, 134217728, 134221824, 524288, 528384, 134742016, 134746112, 16, 4112, 134217744, 134221840, 524304, 528400,
                134742032, 134746128 };
        pc2bytes13 = new int[] { 0, 4, 256, 260, 0, 4, 256, 260, 1, 5, 257, 261, 1, 5, 257, 261 };

        int c = str.length() > 8 ? 3 : 1;

        int[] h = new int[32 * c];
        int[] n = new int[] { 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0 };
        int A = 0;
        int s = 0;
        int t = 0;
        int r = 0;
        for (int y = 0; y < c; y++) {
            int left = str.charAt(A++) << 24 | str.charAt(A++) << 16 | str.charAt(A++) << 8 | str.charAt(A++);
            int right = str.charAt(A++) << 24 | str.charAt(A++) << 16 | str.charAt(A++) << 8 | str.charAt(A++);
            int a = 252645135 & (left >>> 4 ^ right);

            right ^= a;
            left ^= a << 4;
            a = 65535 & (right >>> -16 ^ left);
            left ^= a;
            right ^= a << -16;
            a = 858993459 & (left >>> 2 ^ right);
            right ^= a;
            left ^= a << 2;
            a = 65535 & (right >>> -16 ^ left);
            left ^= a;
            right ^= a << -16;
            a = 1431655765 & (left >>> 1 ^ right);
            right ^= a;
            left ^= a << 1;
            a = 16711935 & (right >>> 8 ^ left);
            left ^= a;
            right ^= a << 8;
            a = 1431655765 & (left >>> 1 ^ right);
            right ^= a;
            left ^= a << 1;
            a = left << 8 | right >>> 20 & 240;
            left = right << 24 | right << 8 & 16711680 | right >>> 8 & 65280 | right >>> 24 & 240;
            right = a;

            for (int i = 0; i < n.length; i++) {
                if (n[i] == 1) {
                    left = left << 2 | left >>> 26;
                    right = right << 2 | right >>> 26;
                } else {
                    left = left << 1 | left >>> 27;
                    right = right << 1 | right >>> 27;
                }
                left &= -15;
                right &= -15;
                t = pc2bytes0[left >>> 28] | pc2bytes1[left >>> 24 & 15] | pc2bytes2[left >>> 20 & 15] | pc2bytes3[left >>> 16 & 15]
                        | pc2bytes4[left >>> 12 & 15] | pc2bytes5[left >>> 8 & 15] | pc2bytes6[left >>> 4 & 15];
                r = pc2bytes7[right >>> 28] | pc2bytes8[right >>> 24 & 15] | pc2bytes9[right >>> 20 & 15] | pc2bytes10[right >>> 16 & 15]
                        | pc2bytes11[right >>> 12 & 15] | pc2bytes12[right >>> 8 & 15] | pc2bytes13[right >>> 4 & 15];
                a = 65535 & (r >>> 16 ^ t);
                h[s++] = t ^ a;
                h[s++] = r ^ a << 16;
            }

        }
        return h;
    }

    public static String base64encode(String e) {
        int n = 0;
        int h = 0;
        int c = 0;
        int r = 0;
        int a = e.length();
        String A = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        StringBuffer buf = new StringBuffer();
        for (r = 0; r < a;) {
            c = 255 & e.charAt(r++);
            if (r == a) {
                buf.append(A.charAt(c >> 2));
                buf.append(A.charAt((3 & c) << 4));
                buf.append("==");
                break;
            }

            h = e.charAt(r++);
            if (r == a) {
                buf.append(A.charAt(c >> 2));
                buf.append(A.charAt((3 & c) << 4 | (240 & h) >> 4));
                buf.append(A.charAt((15 & h) << 2));
                buf.append("=");
                break;
            }
            n = e.charAt(r++);
            buf.append(A.charAt(c >> 2));
            buf.append(A.charAt((3 & c) << 4 | (240 & h) >> 4));
            buf.append(A.charAt((15 & h) << 2 | (192 & n) >> 6));
            buf.append(A.charAt(63 & n));
        }
        return buf.toString();
    }

    public static String base64decode(String e) {
        int o = 0;
        int r = 0;
        int s = 0;
        int d = 0;
        int t = 0;
        int i = 0;
        int a = 0;
        String n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        StringBuffer buf = new StringBuffer();
        int p = 0;
        e = e.replaceAll("[^0-9a-zA-Z+/=]", "");
        for (p = 0; p < e.length();) {
            o = n.indexOf(e.charAt(p++));
            r = n.indexOf(e.charAt(p++));
            s = n.indexOf(e.charAt(p++));
            d = n.indexOf(e.charAt(p++));
            t = o << 2 | r >> 4;
            i = (15 & r) << 4 | s >> 2;
            a = (3 & s) << 6 | d;
            buf.append((char) (t));
            if (64 != s) {
                buf.append((char) i);
            }
            if (64 != d) {
                buf.append((char) a);
            }
        }
        return utf8Decode(buf.toString());
    }

    public static String utf8Decode(String e) {
        StringBuffer buf = new StringBuffer();
        int a = 0;
        int c2 = 0;
        int c3 = 0;
        for (int i = 0; i < e.length();) {
            a = e.charAt(i);
            if (128 > a) {
                buf.append((char) a);
                i++;
            } else {
                if (a > 191 && 224 > a) {
                    c2 = e.charAt(i + 1);
                    buf.append((char) ((31 & a) << 6 | 63 & c2));
                    i += 2;
                } else {
                    c2 = e.charAt(i + 1);
                    c3 = e.charAt(i + 2);
                    buf.append((char) ((15 & a) << 12 | (63 & c2) << 6 | 63 & c3));
                    i += 3;
                }
            }
        }
        return buf.toString();
    }
}
